@inject Microsoft.Extensions.Localization.IStringLocalizer<Profile> _localizer

<MudGrid>
    <MudItem xs="12" sm="4" md="3">
        <MudCard Elevation="25">
            <MudCardContent>
                <div class="d-flex justify-center mb-4">
                    <MudAvatar Color="Color.Secondary" Style="height:250px; width:250px;">S</MudAvatar>
                </div>
                <MudText Typo="Typo.h6" Align="Align.Center">@userModel.UserName</MudText>
                <MudText Align="Align.Center">@email</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="8" md="9">
        <EditForm Model="@userModel">
            <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>@_localizer["UserInformation"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="@userModel.UserName" For="@(() => userModel.UserName)" Label="@_localizer["Username"]" Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions Class="pb-4 pl-4">
                    <MudButton Variant="Variant.Filled" OnClick="EditButton" Color="Color.Primary" Class="ml-auto" ButtonType="ButtonType.Submit">@_localizer["SaveButton"]</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
</MudGrid>


@code {

    UpdateUserCommand userModel = new();
    string email;

    protected override async Task OnInitializedAsync()
    {
        //Set Bearer if Auth Null
        if (_httpClient.DefaultRequestHeaders.Authorization?.Scheme != "Bearer")
        {
            _httpClient.DefaultRequestHeaders.Add(StorageConstants.Local.headerName, "Bearer " + await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken));
        }

        try
        {
            userModel.Id = await _localStorage.GetItemAsync<string>(StorageConstants.Local.userId);
            userModel.UserName = await _localStorage.GetItemAsync<string>(StorageConstants.Local.userUsername);
            email = await _localStorage.GetItemAsync<string>(StorageConstants.Local.userEmail);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    async Task EditButton()
    {
        try
        {
            var response = await _userManager.UpdateUserAsync(userModel);
            if (response.Succeeded)
            {
                Snackbar.Add("Isleminiz Basarili", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}