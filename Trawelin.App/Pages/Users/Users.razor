@page "/users"
@using Trawelin.App.Shared.Dialogs.Users





<MudDataGrid T="ApplicationUserDto" @ref="_mudTable" MultiSelection="true" Items="@UserList" SortMode="SortMode.Multiple" Filterable="true"
             Hideable="true" SelectedItemsChanged="@SelectedItemsChanged" QuickFilter="@_quickFilter" Striped="true" Bordered="true">
    <ToolBarContent>
        <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="CreateButton" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Ekle</MudButton>
        <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="DeleteButton" Disabled="!deleteActive" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Sil</MudButton>
        <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="EditButton" Disabled="!editActive" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info">Duzenle</MudButton>

        <MudSpacer />
        <MudText Typo="Typo.h4">Kullanicilar</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Ara" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="ApplicationUserDto" />
        <Column T="ApplicationUserDto" Field="Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />
        <Column T="ApplicationUserDto" Field="UserName" Title="Kullanici Adi" />
        <Column T="ApplicationUserDto" Field="Email" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUserDto" />
    </PagerContent>
</MudDataGrid>


@code {
   
    private MudDataGrid<ApplicationUserDto> _mudTable;

    private List<ApplicationUserDto> selectedItems;

    private List<ApplicationUserDto> UserList;
    string result = "";
    bool editActive = false;
    bool deleteActive = false;

    //Search Bar String
    string _searchString;

    //QuickFilter Function
    private Func<ApplicationUserDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        //Service Init
        Client service = new Client("https://api.trawelin.com", _httpClient);
        //Get Token From Service
        var response = await service.ApiUsersGetAsync();
        if (response.Succeeded == true)
        {
            UserList = response.Data.ToList();
            foreach (ApplicationUserDto item in UserList)
            {
                Console.WriteLine(item.UserName);
            }
        }
        else
        {
            result = response.Error.Message;
        }
    }

    void SelectedItemsChanged(HashSet<ApplicationUserDto> items)
    {
        selectedItems = items.ToList();

        editActive = selectedItems.Count == 1;
        deleteActive = selectedItems.Count > 0;

    }



    async Task DeleteButton()
    {

        ApplicationUserDto dto = selectedItems[0];
        var parameters = new DialogParameters { ["server"] = dto, ["buttonColor"] = Color.Error, ["buttonText"] = "Delete" };

        var dialog = DialogService.Show<UsersDialog>("Delete User", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _userManager.DeleteUserAsync(dto.Id);
                if (response.Succeeded)
                {

                    UserList.Remove(dto);
                    _mudTable.SetSelectedItemAsync(dto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task EditButton()
    {
        ApplicationUserDto dto = selectedItems[0];
        var parameters = new DialogParameters { ["server"] = dto, ["buttonColor"] = Color.Primary, ["buttonText"] = "Edit" };

        var dialog = DialogService.Show<UsersDialog>("Edit User", parameters);
        var result = await dialog.Result;
        ApplicationUserDto test = result.Data as ApplicationUserDto;

        if (!result.Cancelled)
        {
            try
            {
                UpdateUserCommand updateUserCommand = new();
                updateUserCommand.Id = dto.Id;
                updateUserCommand.UserName = test.UserName;
                var response = await _userManager.UpdateUserAsync(updateUserCommand);
                if (response.Succeeded)
                {
                    UserList.Remove(dto);
                    UserList.Add(test);
                    _mudTable.SetSelectedItemAsync(dto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task CreateButton()
    {
        var parameters = new DialogParameters { };

        var dialog = DialogService.Show<CreateUserDialog>("Create User", parameters);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            try
            {
                CreateUserCommand createUserCommand = result.Data as CreateUserCommand;
                ApplicationUserDto userdto = _mapper.Map<ApplicationUserDto>(createUserCommand);
                var response = await _userManager.CreateUserAsync(createUserCommand);
                if (response.Succeeded)
                {
                    userdto.Id = response.Data.Id;
                    UserList.Add(userdto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

}