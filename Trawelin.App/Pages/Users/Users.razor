@page "/users"
@using Trawelin.App.Shared.Dialogs.Users
@inject Microsoft.Extensions.Localization.IStringLocalizer<Users> _localizer

@if (IsTaskRunning)
{
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}else{
<MudDataGrid T="ApplicationUserDto" @ref="_mudTable" MultiSelection="true" Items="@UserList" SortMode="SortMode.Multiple" Filterable="true"
             Hideable="true" SelectedItemsChanged="@SelectedItemsChanged" QuickFilter="@_quickFilter" Striped="true" Bordered="true">
    <ToolBarContent>
        <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="CreateButton" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">@_localizer["CreateButton"]</MudButton>
            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="DeleteButton" Disabled="!deleteActive" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">@_localizer["DeleteButton"]</MudButton>
            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="EditButton" Disabled="!editActive" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info">@_localizer["EditButton"]</MudButton>

        <MudSpacer />
        <MudText Typo="Typo.h4">@_localizer["UsersTitle"]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="@_localizer["Search"]" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="ApplicationUserDto" />
        <Column T="ApplicationUserDto" Field="Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />
        <Column T="ApplicationUserDto"  Field="UserName" Title="@_localizer["Username"]" />
            <Column T="ApplicationUserDto" Field="@_localizer["Email"]" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationUserDto" />
    </PagerContent>
</MudDataGrid>
}

@code {
   
    private MudDataGrid<ApplicationUserDto> _mudTable;

    private List<ApplicationUserDto> selectedItems;

    private List<ApplicationUserDto> UserList;
    string result = "";
    bool editActive = false;
    bool deleteActive = false;

    //Search Bar String
    string _searchString;

    bool IsTaskRunning = true;

    DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };


    //QuickFilter Function
    private Func<ApplicationUserDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        if (_httpClient.DefaultRequestHeaders.Authorization?.Scheme != "Bearer")
        {
            _httpClient.DefaultRequestHeaders.Add(StorageConstants.Local.headerName, "Bearer " + await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken));
        }
        //Service Init
        Client service = new Client("https://api.trawelin.com", _httpClient);
        //Get Token From Service
        var response = await service.ApiUsersGetAsync();
        IsTaskRunning = false;
        if (response.Succeeded == true)
        {
            UserList = response.Data.ToList();
        }
        else
        {
            result = response.Error.Message;
        }
    }

    void SelectedItemsChanged(HashSet<ApplicationUserDto> items)
    {
        selectedItems = items.ToList();

        editActive = selectedItems.Count == 1;
        deleteActive = selectedItems.Count > 0;

    }



    async Task DeleteButton()
    {

        ApplicationUserDto applicationUserDto = selectedItems[0];
        var parameters = new DialogParameters { ["applicationUserDto"] = applicationUserDto};
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteUserDialog>("Delete User", parameters, options);
        var result = await dialog.Result;
        ApplicationUserDto modalData = result.Data as ApplicationUserDto;
        if (!result.Cancelled)
        {
            try
            {
                var response = await _userManager.DeleteUserAsync(modalData.Id);
                if (response.Succeeded)
                {

                    UserList.Remove(applicationUserDto);
                    _mudTable.SetSelectedItemAsync(applicationUserDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task EditButton()
    {
        ApplicationUserDto applicationUserDto = selectedItems[0];
        UpdateUserCommand updateUserCommand = _mapper.Map<UpdateUserCommand>(applicationUserDto);
        var parameters = new DialogParameters { ["updateUserCommand"] = updateUserCommand};
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;
        UpdateUserCommand modalData = result.Data as UpdateUserCommand;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _userManager.UpdateUserAsync(modalData);
                if (response.Succeeded)
                {
                    UserList.Remove(applicationUserDto);
                    UserList.Add(response.Data);
                    _mudTable.SetSelectedItemAsync(applicationUserDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task CreateButton()
    {

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<CreateUserDialog>("Create User",options);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            try
            {
                CreateUserCommand createUserCommand = result.Data as CreateUserCommand;
                var response = await _userManager.CreateUserAsync(createUserCommand);
                if (response.Succeeded)
                {
                    UserList.Add(response.Data);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

}