@page "/countryDefinition"
@inject Microsoft.Extensions.Localization.IStringLocalizer<CountryDefinition> _localizer

<ComponentTitle Title="Countries" Description="Manage Countries" />
@if (IsTaskRunning)
{
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}else{
        <MudDataGrid T="CountryDto" @ref="_mudTable" MultiSelection="true" ColumnResizeMode="ResizeMode.Column" Items="@countryList" SortMode="SortMode.Multiple" Filterable="true"
             QuickFilter="@_quickFilter" Hideable="true" SelectedItemsChanged="@SelectedItemsChanged" Striped="true" Bordered="true">
        <ToolBarContent>
            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="CreateButton" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">@_localizer["CreateButton"]</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="DeleteButton" Disabled="!buttonActive" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">@_localizer["DeleteButton"]</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="EditButton" Disabled="!buttonActive" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info">@_localizer["EditButton"]</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="GoToCityButton" Disabled="!buttonActive" EndIcon="@Icons.Material.Filled.ArrowRight" Color="Color.Info">@_localizer["GoToButton"]</MudButton>

            <MudTextField @bind-Value="_searchString" Placeholder="@_localizer["Search"]" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="CountryDto" />
            <Column T="CountryDto" Field="Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />

            <Column T="CountryDto" Field="Name" Title="@_localizer["Country"]" Sortable="false" Filterable="false" IsEditable="false" />

        </Columns>
        <PagerContent>
            <MudDataGridPager T="CountryDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    //DataGrid Table
    private MudDataGrid<CountryDto> _mudTable;
    //DataGrid Data
    private List<CountryDto> countryList = new List<CountryDto>();
    private List<CountryDto> selectedItems;

    //Button Active Check
    bool buttonActive = false;

    //Search Bar String
    string _searchString;

    //Dialog Settings
    DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };

    bool IsTaskRunning = true;

    //QuickFilter Function
    private Func<CountryDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        //Set Bearer if Auth Null
        if (_httpClient.DefaultRequestHeaders.Authorization?.Scheme != "Bearer")
        {
            _httpClient.DefaultRequestHeaders.Add(StorageConstants.Local.headerName, "Bearer " + await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken));
        }

        //Get Country From Service
        var response = await _regionManager.GetCountryAsync();
        IsTaskRunning = false;
        if (response.Succeeded == true)
        {
            countryList = response.Data.ToList();
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
    }


    void SelectedItemsChanged(HashSet<CountryDto> items)
    {
        selectedItems = items.ToList();
        buttonActive = selectedItems.Count == 1;
    }



    async Task DeleteButton()
    {
        //Get Selected Item From Datatable
        CountryDto countryDto = selectedItems[0];
        
        //Dialog Parameter
        var parameters = new DialogParameters { ["countryDto"] = countryDto };
        
        //Dialog
        var dialog = DialogService.Show<DeleteCountryDialog>("Delete Country", parameters,options);
        
        //Dialog Result
        var result = await dialog.Result;
        CountryDto modalData = result.Data as CountryDto;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _regionManager.DeleteCountryAsync(modalData.Id);
                if (response.Succeeded)
                {
                    _mudTable.SetSelectedItemAsync(countryDto);
                    countryList.Remove(countryDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
                else
                {
                    Snackbar.Add(response.Error.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task EditButton()
    {
        //Get Selected Item From Datatable
        CountryDto dto = selectedItems[0];
        
        //Dialog Parameter
        UpdateCountryCommand updateCountryCommand = _mapper.Map<UpdateCountryCommand>(dto);
        var parameters = new DialogParameters { ["updateCountryCommand"] = updateCountryCommand };
        
        //Dialog
        var dialog = DialogService.Show<EditCountryDialog>("Edit Country", parameters,options);
        
        //Dialog Result
        var result = await dialog.Result;
        UpdateCountryCommand modalData = result.Data as UpdateCountryCommand;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _regionManager.UpdateCountryAsync(modalData);
                if (response.Succeeded)
                {
                    countryList.Remove(dto);
                    countryList.Add(response.Data);
                    _mudTable.SetSelectedItemAsync(dto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
                else
                {
                    Snackbar.Add(response.Error.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task CreateButton()
    {
        //Dialog
        var dialog = DialogService.Show<CreateCountryDialog>("Create Country", options);
        
        //Dialog Result
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                CreateCountryCommand createCountryCommand = result.Data as CreateCountryCommand;
                CountryDto countryDto = _mapper.Map<CountryDto>(createCountryCommand);
                var response = await _regionManager.CreateCountryAsync(createCountryCommand);
                if (response.Succeeded)
                {
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                    countryList.Add(response.Data);
                }
                else
                {
                    Snackbar.Add(response.Error.Message, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task GoToCityButton()
    {
        _navigationManager.NavigateTo("citydefinition" + "/" + selectedItems[0].Id);

    }

}