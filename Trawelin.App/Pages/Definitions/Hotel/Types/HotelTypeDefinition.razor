@page "/hotelTypes"
@inject Microsoft.Extensions.Localization.IStringLocalizer<HotelTypeDefinition> _localizer

<ComponentTitle Title="Hotel Types" Description="Manage Hotel Types" />
@if (IsTaskRunning)
{
	<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}else{
<MudDataGrid T="HotelTypeDto" @ref="_mudTable" MultiSelection="true" Items="@hotelTypeList" SortMode="SortMode.Multiple" Filterable="true"
             QuickFilter="@_quickFilter" Hideable="true" SelectedItemsChanged="@SelectedItemsChanged" Striped="true" Bordered="true">
    <ToolBarContent>
            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="CreateButton" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">@_localizer["CreateButton"]</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="DeleteButton" Disabled="!buttonActive" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">@_localizer["DeleteButton"]</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="EditButton" Disabled="!buttonActive" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info">@_localizer["EditButton"]</MudButton>

        <MudSpacer />
            @*<MudText Typo="Typo.h4">@_localizer["Title"]</MudText>*@
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="@_localizer["Search"]" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="HotelTypeDto" />
        <Column T="HotelTypeDto" Field="Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />

            <Column T="HotelTypeDto" Field="Name" Title="@_localizer["Name"]" Sortable="false" Filterable="false" IsEditable="false" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="HotelTypeDto" />
    </PagerContent>
</MudDataGrid>
}

@code {
    //DataGrid Table
    private MudDataGrid<HotelTypeDto> _mudTable;

    //DataGrid Data
    private List<HotelTypeDto> hotelTypeList = new List<HotelTypeDto>();
    private List<HotelTypeDto> selectedItems;

    //Button Active Check
    bool buttonActive = false;

    //Search Bar String
    string _searchString;

    //Dialog Settings
    DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };

    bool IsTaskRunning = true;

    protected override async Task OnInitializedAsync()
    {
        //Set Bearer if Auth Null
        if (_httpClient.DefaultRequestHeaders.Authorization?.Scheme != "Bearer")
        {
            _httpClient.DefaultRequestHeaders.Add(StorageConstants.Local.headerName, "Bearer " + await _localStorage.GetItemAsync<string>(StorageConstants.Local.AuthToken));
        }

        //Get Hotel Type From Service
        var response = await _hotelTypeManager.GetHotelTypeAsync();

        IsTaskRunning = false;
        if (response.Succeeded == true)
        {
            hotelTypeList = response.Data.ToList();
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
    }

    //Quick Filter
    private Func<HotelTypeDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };



    void SelectedItemsChanged(HashSet<HotelTypeDto> items)
    {
        selectedItems = items.ToList();
        buttonActive = selectedItems.Count == 1;
    }



    async Task DeleteButton()
    {
        //Get Selected Item From Datatable
        HotelTypeDto hotelTypeDto = selectedItems[0];
        
        //Dialog Parameter
        var parameters = new DialogParameters { ["hotelTypeDto"] = hotelTypeDto };
        
        //Dialog
        var dialog = DialogService.Show<DeleteHotelTypeDialog>("Delete Category", parameters, options);
        
        //Dialog Result
        var result = await dialog.Result;
        HotelTypeDto modalData = result.Data as HotelTypeDto;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _hotelTypeManager.DeleteHotelTypeAsync(modalData.Id);
                if (response.Succeeded)
                {
                    _mudTable.SetSelectedItemAsync(hotelTypeDto);
                    hotelTypeList.Remove(hotelTypeDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task EditButton()
    {
        //Get Selected Item From Datatable
        HotelTypeDto hotelTypeDto = selectedItems[0];
        
        //Dialog Parameter
        UpdateHotelTypeCommand updateHotelTypeCommand = _mapper.Map<UpdateHotelTypeCommand>(hotelTypeDto);
        var parameters = new DialogParameters { ["updateHotelTypeCommand"] = updateHotelTypeCommand };
        
        //Dialog
        var dialog = DialogService.Show<EditHotelTypeDialog>("Edit Category", parameters, options);
        
        //Dialog Result
        var result = await dialog.Result;
        UpdateHotelTypeCommand modalData = result.Data as UpdateHotelTypeCommand;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _hotelTypeManager.UpdateHotelTypeAsync(modalData);
                if (response.Succeeded)
                {
                    hotelTypeList.Remove(hotelTypeDto);
                    hotelTypeList.Add(response.Data);
                    _mudTable.SetSelectedItemAsync(hotelTypeDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task CreateButton()
    {
        //Dialog
        var dialog = DialogService.Show<CreateHotelTypeDialog>("Create Category", options);
        
        //Dialog Result
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                CreateHotelTypeCommand createHotelTypeCommand = result.Data as CreateHotelTypeCommand;
                var response = await _hotelTypeManager.CreateHotelTypeAsync(createHotelTypeCommand);
                if (response.Succeeded)
                {
                    if (response.Succeeded)
                    {
                        hotelTypeList.Add(response.Data);
                        Snackbar.Add("Isleminiz Basarili", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add(response.Error.Message, Severity.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }
}