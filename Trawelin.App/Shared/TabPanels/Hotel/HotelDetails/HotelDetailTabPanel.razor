@if (IsTaskRunning)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudCard>
                <MudForm>
                    <MudCardContent>
                        <MudTextField Class="pa-4" @bind-Value="@model.Name" Label="Name" />
                        <MudTextField Class="pa-4" @bind-Value="@model.General.Email" Label="Email" />
                        <MudTextField Class="pa-4" @bind-Value="@model.General.Emails" Label="Emails" />
                        <MudTextField Class="pa-4" @bind-Value="@model.General.Phone" Label="Phone Number" />
                        <MudTextField Class="pa-4" @bind-Value="@model.General.Manager" Label="Manager" />
                        <MudTextField Class="pa-4" @bind-Value="@model.General.Note" Label="Notes" />
                    </MudCardContent>
                </MudForm>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudCard>
                <MudForm>
                    <MudCardContent>

                        <Trawelin.App.Shared.Components.CategorySelector categoryId="model.General.CategoryId" CategoryChanged="SelectedCategory" />

                        <Trawelin.App.Shared.Components.HotelTypeSelector hotelTypeId="model.General.HotelTypeId" HotelTypeChanged="SelectedHotelType" />

                        <Trawelin.App.Shared.Components.SupplierSelector supplierId="model.SupplierId" SupplierChanged="SelectedSupplier" />


                        <Trawelin.App.Shared.Components.RegionSelector villageId="model.General.RegionId" />
                    </MudCardContent>

                </MudForm>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}
@code {

    [Parameter]
    public int id { get; set; }

    HotelDto model = new HotelDto();

    private MudAutocomplete<SupplierDto> supplierAuto;

    List<SupplierDto> supplierDto { get; set; } = new List<SupplierDto>();

    private MudAutocomplete<HotelTypeDto> hotelTypeAuto;

    List<HotelTypeDto> hotelTypeDtos { get; set; } = new List<HotelTypeDto>();

    void SelectedCategory(CategoryDto categoryDto) => model.General.CategoryId = categoryDto.Id;
    void SelectedHotelType(HotelTypeDto hotelTypeDto) => model.General.HotelTypeId = hotelTypeDto.Id;
    void SelectedSupplier(SupplierDto supplierDto) => model.SupplierId = supplierDto.Id;

    bool IsTaskRunning = true;

    protected override async Task OnInitializedAsync()
    {
        var response = await _hotelManager.GetHotelByIdAsync(id);
        if (response.Succeeded)
        {
            model = response.Data;
            IsTaskRunning = false;

        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }
    }



    private async Task OnHotelTypeValueChanged(HotelTypeDto hotelType)
    {
        model.General.HotelTypeId = hotelType.Id;

        return;
    }
    private async Task OnSupplierValueChanged(SupplierDto supplier)
    {
        model.SupplierId = supplier.Id;

        return;
    }

    //
    private async Task<IEnumerable<HotelTypeDto>> SearchHoteType(string value)
    {

        // If text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return hotelTypeDtos;
        return hotelTypeDtos.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<SupplierDto>> SearchSupplier(string value)
    {

        // If text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return supplierDto;
        return supplierDto.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}