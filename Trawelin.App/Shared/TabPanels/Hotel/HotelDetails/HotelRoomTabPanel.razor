@if (IsTaskRunning)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid T="HotelRoomDto" @ref="_mudTable" MultiSelection="true" Items="@hotelRoomTypeList" SortMode="SortMode.Multiple" Filterable="true"
             QuickFilter="@_quickFilter" Hideable="true" SelectedItemsChanged="@SelectedItemsChanged" Striped="true" Bordered="true">
        <ToolBarContent>
            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="CreateButton" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Create</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="DeleteButton" Disabled="!buttonActive" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>

            <MudButton Style="margin-left:10px" Variant="Variant.Filled" OnClick="EditButton" Disabled="!buttonActive" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info">Edit</MudButton>

            <MudTextField @bind-Value="_searchString" Placeholder="Test" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="HotelRoomDto" />
            <Column T="HotelRoomDto" Field="Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />

            <Column T="HotelRoomDto" Field="Name" Title="Name" Sortable="false" Filterable="false" IsEditable="false" />

        </Columns>
        <PagerContent>
            <MudDataGridPager T="HotelRoomDto" />
        </PagerContent>
    </MudDataGrid>
}
@code {

    [Parameter]
    public int id { get; set; }

    //DataGrid Table
    private MudDataGrid<HotelRoomDto> _mudTable;
    //DataGrid Data
    private List<HotelRoomDto> hotelRoomTypeList = new List<HotelRoomDto>();
    private List<HotelRoomDto> selectedItems;
    private HotelRoomDto test = new HotelRoomDto();

    //Button Active Check
    bool buttonActive = false;

    //Search Bar String
    string _searchString;

    //Dialog Settings
    DialogOptions options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };

    bool IsTaskRunning = true;

    protected override async Task OnInitializedAsync()
    {
        var response = await _hotelRoomManager.GetHotelRoomByIdAsync(id);
        if (response.Succeeded == true)
        {
            test = response.Data;
            IsTaskRunning = false;
        }
        else
        {
            Snackbar.Add(response.Error.Message, Severity.Error);
        }


    }

    private Func<HotelRoomDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Hotel.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };



    void SelectedItemsChanged(HashSet<HotelRoomDto> items)
    {
        selectedItems = items.ToList();
        buttonActive = selectedItems.Count == 1;
    }



    async Task DeleteButton()
    {
        HotelRoomDto roomTypeDto = selectedItems[0];
        var parameters = new DialogParameters { ["roomTypeDto"] = roomTypeDto };

        var dialog = DialogService.Show<DeleteHotelRoomTypeDialog>("Delete Room Type", parameters, options);
        var result = await dialog.Result;
        HotelRoomDto modalData = result.Data as HotelRoomDto;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _hotelRoomManager.DeleteHotelRoomAsync(modalData.Id);
                if (response.Succeeded)
                {

                    _mudTable.SetSelectedItemAsync(roomTypeDto);
                    hotelRoomTypeList.Remove(roomTypeDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task EditButton()
    {
        HotelRoomDto roomTypeDto = selectedItems[0];
        UpdateHotelRoomCommand updateHotelRoomCommand = _mapper.Map<UpdateHotelRoomCommand>(roomTypeDto);
        var parameters = new DialogParameters { ["updateHotelRoomCommand"] = updateHotelRoomCommand };

        var dialog = DialogService.Show<EditHotelRoomTypeDialog>("Edit Room Type", parameters, options);
        var result = await dialog.Result;
        UpdateHotelRoomCommand modalData = result.Data as UpdateHotelRoomCommand;

        if (!result.Cancelled)
        {
            try
            {
                var response = await _hotelRoomManager.UpdateHotelRoomAsync(modalData);
                if (response.Succeeded)
                {
                    hotelRoomTypeList.Remove(roomTypeDto);
                    hotelRoomTypeList.Add(response.Data);
                    _mudTable.SetSelectedItemAsync(roomTypeDto);
                    Snackbar.Add("Isleminiz Basarili", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }

    async Task CreateButton()
    {

        var dialog = DialogService.Show<CreateHotelRoomTypeDialog>("Create Room Type", options);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            try
            {
                CreateHotelRoomCommand createHotelRoomCommand = result.Data as CreateHotelRoomCommand;
                var response = await _hotelRoomManager.CreateHotelRoomAsync(createHotelRoomCommand);
                if (response.Succeeded)
                {
                    if (response.Succeeded)
                    {
                        hotelRoomTypeList.Add(response.Data);
                        Snackbar.Add("Isleminiz Basarili", Severity.Success);
                    }
                    else
                    {
                        Console.Write(response.Error.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    }





}